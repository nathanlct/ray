{"version":3,"sources":["components/TitleCard.tsx","type/actor.ts","components/StatusChip.tsx","components/SearchComponent.tsx","util/hook.ts","util/converter.ts","util/func.tsx","components/ActorTable.tsx","components/PercentageBar.tsx","components/StatesCounter.tsx","components/WorkerTable.tsx","components/Loading.tsx","../node_modules/@material-ui/core/esm/Switch/Switch.js","service/job.ts","pages/job/JobDetail.tsx","pages/job/hook/useJobDetail.ts"],"names":["useStyles","makeStyles","theme","card","padding","spacing","paddingTop","margin","map","e","join","title","fontSize","typography","fontWeight","color","palette","text","secondary","marginBottom","body","TitleCard","children","classes","className","ActorEnum","colorMap","node","ALIVE","green","DEAD","red","actor","PENDING","blue","RECONSTRUCTING","lightBlue","job","INIT","grey","SUBMITTED","DISPATCHED","RUNNING","COMPLETED","cyan","FINISHED","FAILED","typeMap","deps","INFO","ERROR","StatusChip","type","status","suffix","style","border","borderRadius","blueGrey","borderColor","backgroundColor","search","marginTop","SearchInput","label","onChange","defaultValue","size","InputProps","value","target","endAdornment","position","SearchSelect","options","select","SelectProps","width","useFilter","useState","filters","setFilters","changeFilter","key","val","f","find","push","filterFunc","instance","every","get","toString","includes","useSorter","initialSortKey","desc","sorter","setSorter","sorterFunc","instanceA","instanceB","b","a","setSortKey","setOrderDesc","sorterKey","memoryConverter","bytes","toFixed","longTextCut","len","interactive","length","slice","ActorTable","actors","workers","pageNo","setPageNo","pageSize","setPageSize","ipLogMap","useContext","GlobalContext","actorList","Object","values","functionDesc","taskSpec","functionDescriptor","javaFunctionDescriptor","pythonFunctionDescriptor","filter","list","Fragment","flex","display","alignItems","Array","from","Set","state","onInputChange","_","trim","renderInput","params","address","ipAddress","Math","min","Number","page","num","count","ceil","col","align","actorId","jobId","pid","name","numRestarts","coreWorkerStats","expandComponent","actorMap","mini","orange","port","to","encodeURIComponent","useStyle","container","background","height","lineHeight","boxSizing","displayBar","paper","right","transition","borderTopLeftRadius","borderBottomLeftRadius","zIndex","primary","textAlign","PercentageBar","props","total","per","round","max","StateCounter","stateMap","forEach","item","entries","s","ExpandableTableRow","stateKey","otherProps","React","isExpanded","setIsExpanded","useEffect","startsWith","onClick","colSpan","WorkerDetailTable","RayletWorkerTable","setKey","nodeMap","random","sort","aWorker","bWorker","cpuPercent","cpuTimes","memoryInfo","cmdline","createTime","language","ip","hostname","maxHeight","overflow","lineBreak","dayjs","format","window","open","Loading","loading","Switch","ref","_props$color","_props$edge","edge","_props$size","other","_objectWithoutProperties","icon","thumb","clsx","root","edgeStart","edgeEnd","concat","capitalize","SwitchBase","_extends","checkedIcon","switchBase","input","checked","disabled","track","withStyles","flexShrink","verticalAlign","colorAdjust","marginLeft","marginRight","top","left","transitions","create","duration","shortest","transform","opacity","colorPrimary","main","fade","action","hoverOpacity","common","black","white","colorSecondary","sizeSmall","boxShadow","shadows","getJobList","getJobDetail","id","pageMeta","tab","dependenciesChip","wordBreak","alert","error","JobDetailPage","match","setJob","msg","setMsg","refreshing","setRefresh","selectedTab","setTab","tot","useRef","getJob","useCallback","rsp","data","detail","result","undefined","current","setTimeout","clearTimeout","jobInfo","jobActors","handleChange","event","newValue","handleSwitchChange","useJobDetail","isDead","inputProps","Tabs","Tab","jobWorkers","Grid","xs","driverIpAddress","driverPid","eventUrl","href","rel","failErrorMessage","dependencies","python","justifyItems","flexWrap","java","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","version","url"],"mappings":"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","file":"static/js/7.fd4fed93.chunk.js","sourcesContent":["import { makeStyles, Paper } from \"@material-ui/core\";\nimport React, { PropsWithChildren, ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    padding: theme.spacing(2),\n    paddingTop: theme.spacing(1.5),\n    margin: [theme.spacing(2), theme.spacing(1)].map((e) => `${e}px`).join(\" \"),\n  },\n  title: {\n    fontSize: theme.typography.fontSize + 2,\n    fontWeight: 500,\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(1),\n  },\n  body: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst TitleCard = ({\n  title,\n  children,\n}: PropsWithChildren<{ title: ReactNode | string }>) => {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.card}>\n      <div className={classes.title}>{title}</div>\n      <div className={classes.body}>{children}</div>\n    </Paper>\n  );\n};\n\nexport default TitleCard;\n","export enum ActorEnum {\n  ALIVE = \"ALIVE\",\n  PENDING = \"PENDING\",\n  RECONSTRUCTING = \"RECONSTRUCTING\",\n  DEAD = \"DEAD\",\n}\n\nexport type Address = {\n  rayletId: string;\n  ipAddress: string;\n  port: number;\n  workerId: string;\n};\n\nexport type TaskSpec = {\n  actorCreationTaskSpec: {\n    actorId: string;\n    dynamicWorkerOptions: string[];\n    extensionData: string;\n    isAsyncio: boolean;\n    isDetached: boolean;\n    maxActorRestarts: boolean;\n    maxConcurrency: number;\n    name: string;\n  };\n  args: {\n    data: string;\n    metadata: string;\n    nestedInlinedIds: string[];\n    objectIds: string[];\n  }[];\n  callerAddress: {\n    ipAddress: string;\n    port: number;\n    rayletId: string;\n    workerId: string;\n  };\n  callerId: string;\n  functionDescriptor: {\n    javaFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n    pythonFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n  };\n  jobId: string;\n  language: string;\n  maxRetries: number;\n  numReturns: string;\n  parentCounter: string;\n  parentTaskId: string;\n  requiredPlacementResources: {\n    [key: string]: number;\n  };\n  requiredResources: {\n    [key: string]: number;\n  };\n  sourceActorId: string;\n  taskId: string;\n  type: string;\n};\n\nexport type Actor = {\n  actorId: string;\n  children: { [key: string]: Actor };\n  taskSpec: TaskSpec;\n  ipAddress: string;\n  isDirectCall: boolean;\n  jobId: string;\n  numExecutedTasks: number;\n  numLocalObjects: number;\n  numObjectIdsInScope: number;\n  state: ActorEnum | string; // PENDING, ALIVE, RECONSTRUCTING, DEAD\n  taskQueueLength: number;\n  usedObjectStoreMemory: number;\n  usedResources: { [key: string]: string | number };\n  timestamp: number;\n  actorTitle: string;\n  averageTaskExecutionSpeed: number;\n  nodeId: string;\n  pid: number;\n  ownerAddress: Address;\n  address: Address;\n  maxReconstructions: string;\n  remainingReconstructions: string;\n  isDetached: false;\n  name: string;\n  numRestarts: string;\n};\n","import { Color } from \"@material-ui/core\";\nimport {\n  blue,\n  blueGrey,\n  cyan,\n  green,\n  grey,\n  lightBlue,\n  red,\n} from \"@material-ui/core/colors\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\nimport React, { ReactNode } from \"react\";\nimport { ActorEnum } from \"../type/actor\";\n\nconst colorMap = {\n  node: {\n    ALIVE: green,\n    DEAD: red,\n  },\n  actor: {\n    [ActorEnum.ALIVE]: green,\n    [ActorEnum.DEAD]: red,\n    [ActorEnum.PENDING]: blue,\n    [ActorEnum.RECONSTRUCTING]: lightBlue,\n  },\n  job: {\n    INIT: grey,\n    SUBMITTED: blue,\n    DISPATCHED: lightBlue,\n    RUNNING: green,\n    COMPLETED: cyan,\n    FINISHED: cyan,\n    FAILED: red,\n  },\n} as {\n  [key: string]: {\n    [key: string]: Color;\n  };\n};\n\nconst typeMap = {\n  deps: blue,\n  INFO: cyan,\n  ERROR: red,\n} as {\n  [key: string]: Color;\n};\n\nexport const StatusChip = ({\n  type,\n  status,\n  suffix,\n}: {\n  type: string;\n  status: string | ActorEnum | ReactNode;\n  suffix?: string;\n}) => {\n  const style = {\n    padding: \"2px 8px\",\n    border: \"solid 1px\",\n    borderRadius: 4,\n    fontSize: 12,\n    margin: 2,\n  } as CSSProperties;\n\n  let color = blueGrey as Color;\n\n  if (typeMap[type]) {\n    color = typeMap[type];\n  } else if (\n    typeof status === \"string\" &&\n    colorMap[type] &&\n    colorMap[type][status]\n  ) {\n    color = colorMap[type][status];\n  }\n\n  style.color = color[500];\n  style.borderColor = color[500];\n  if (color !== blueGrey) {\n    style.backgroundColor = `${color[500]}20`;\n  }\n\n  return (\n    <span style={style}>\n      {status}\n      {suffix}\n    </span>\n  );\n};\n","import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","import { get } from \"lodash\";\nimport { useState } from \"react\";\n\nexport const useFilter = <KeyType extends string>() => {\n  const [filters, setFilters] = useState<{ key: KeyType; val: string }[]>([]);\n  const changeFilter = (key: KeyType, val: string) => {\n    const f = filters.find((e) => e.key === key);\n    if (f) {\n      f.val = val;\n    } else {\n      filters.push({ key, val });\n    }\n    setFilters([...filters]);\n  };\n  const filterFunc = (instance: { [key: string]: any }) => {\n    return filters.every(\n      (f) => !f.val || get(instance, f.key, \"\").toString().includes(f.val),\n    );\n  };\n\n  return {\n    changeFilter,\n    filterFunc,\n  };\n};\n\nexport const useSorter = (initialSortKey?: string) => {\n  const [sorter, setSorter] = useState({\n    key: initialSortKey || \"\",\n    desc: false,\n  });\n\n  const sorterFunc = (\n    instanceA: { [key: string]: any },\n    instanceB: { [key: string]: any },\n  ) => {\n    if (!sorter.key) {\n      return 0;\n    }\n\n    let [b, a] = [instanceA, instanceB];\n    if (sorter.desc) {\n      [a, b] = [instanceA, instanceB];\n    }\n\n    if (!get(a, sorter.key)) {\n      return -1;\n    }\n\n    if (!get(b, sorter.key)) {\n      return 1;\n    }\n\n    return get(a, sorter.key) > get(b, sorter.key) ? 1 : -1;\n  };\n\n  return {\n    sorterFunc,\n    setSortKey: (key: string) => setSorter({ ...sorter, key }),\n    setOrderDesc: (desc: boolean) => setSorter({ ...sorter, desc }),\n    sorterKey: sorter.key,\n  };\n};\n","export const memoryConverter = (bytes: number) => {\n  if (bytes < 1024) {\n    return `${bytes}KB`;\n  }\n\n  if (bytes < 1024 ** 2) {\n    return `${(bytes / 1024 ** 1).toFixed(2)}KB`;\n  }\n\n  if (bytes < 1024 ** 3) {\n    return `${(bytes / 1024 ** 2).toFixed(2)}MB`;\n  }\n\n  if (bytes < 1024 ** 4) {\n    return `${(bytes / 1024 ** 3).toFixed(2)}GB`;\n  }\n\n  if (bytes < 1024 ** 5) {\n    return `${(bytes / 1024 ** 4).toFixed(2)}TB`;\n  }\n\n  if (bytes < 1024 ** 6) {\n    return `${(bytes / 1024 ** 5).toFixed(2)}TB`;\n  }\n\n  return \"\";\n};\n","import { Tooltip } from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\n\nexport const longTextCut = (text: string = \"\", len: number = 28) => (\n  <Tooltip title={text} interactive>\n    <span>{text.length > len ? text.slice(0, len) + \"...\" : text}</span>\n  </Tooltip>\n);\n\nexport const jsonFormat = (str: string | object) => {\n  const preStyle = {\n    textAlign: \"left\",\n    wordBreak: \"break-all\",\n    whiteSpace: \"pre-wrap\",\n  } as CSSProperties;\n  if (typeof str === \"object\") {\n    return <pre style={preStyle}>{JSON.stringify(str, null, 2)}</pre>;\n  }\n  try {\n    const j = JSON.parse(str);\n    if (typeof j !== \"object\") {\n      return JSON.stringify(j);\n    }\n    return <pre style={preStyle}>{JSON.stringify(j, null, 2)}</pre>;\n  } catch (e) {\n    return str;\n  }\n};\n","import {\n  InputAdornment,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { Worker } from \"../type/worker\";\nimport { longTextCut } from \"../util/func\";\nimport { useFilter } from \"../util/hook\";\nimport StateCounter from \"./StatesCounter\";\nimport { StatusChip } from \"./StatusChip\";\nimport RayletWorkerTable, { ExpandableTableRow } from \"./WorkerTable\";\n\nconst ActorTable = ({\n  actors = {},\n  workers = [],\n}: {\n  actors: { [actorId: string]: Actor };\n  workers?: Worker[];\n}) => {\n  const [pageNo, setPageNo] = useState(1);\n  const { changeFilter, filterFunc } = useFilter();\n  const [pageSize, setPageSize] = useState(10);\n  const { ipLogMap } = useContext(GlobalContext);\n  const actorList = Object.values(actors || {})\n    .map((e) => ({\n      ...e,\n      functionDesc: Object.values(\n        e.taskSpec?.functionDescriptor?.javaFunctionDescriptor ||\n          e.taskSpec?.functionDescriptor?.pythonFunctionDescriptor ||\n          {},\n      ).join(\" \"),\n    }))\n    .filter(filterFunc);\n  const list = actorList.slice((pageNo - 1) * pageSize, pageNo * pageSize);\n\n  return (\n    <React.Fragment>\n      <div style={{ flex: 1, display: \"flex\", alignItems: \"center\" }}>\n        <Autocomplete\n          style={{ margin: 8, width: 120 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.state)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"state\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"State\" />\n          )}\n        />\n        <Autocomplete\n          style={{ margin: 8, width: 150 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.address?.ipAddress)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"address.ipAddress\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"IP\" />\n          )}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"PID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"pid\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 200 }}\n          label=\"Task Func Desc\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"functionDesc\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Name\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"name\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Actor ID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"actorId\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Page Size\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              setPageSize(Math.min(Number(value), 500) || 10);\n            },\n          }}\n        />\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <div>\n          <Pagination\n            page={pageNo}\n            onChange={(e, num) => setPageNo(num)}\n            count={Math.ceil(actorList.length / pageSize)}\n          />\n        </div>\n        <div>\n          <StateCounter type=\"actor\" list={actorList} />\n        </div>\n      </div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"ID(Num Restarts)\",\n              \"Name\",\n              \"Task Func Desc\",\n              \"Job Id\",\n              \"Pid\",\n              \"IP\",\n              \"Port\",\n              \"State\",\n              \"Log\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map(\n            ({\n              actorId,\n              functionDesc,\n              jobId,\n              pid,\n              address,\n              state,\n              name,\n              numRestarts,\n            }) => (\n              <ExpandableTableRow\n                length={\n                  workers.filter(\n                    (e) =>\n                      e.pid === pid &&\n                      address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                  ).length\n                }\n                expandComponent={\n                  <RayletWorkerTable\n                    actorMap={{}}\n                    workers={workers.filter(\n                      (e) =>\n                        e.pid === pid &&\n                        address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                    )}\n                    mini\n                  />\n                }\n                key={actorId}\n              >\n                <TableCell\n                  align=\"center\"\n                  style={{\n                    color: Number(numRestarts) > 0 ? orange[500] : \"inherit\",\n                  }}\n                >\n                  {actorId}({numRestarts})\n                </TableCell>\n                <TableCell align=\"center\">{name}</TableCell>\n                <TableCell align=\"center\">\n                  {longTextCut(functionDesc, 60)}\n                </TableCell>\n                <TableCell align=\"center\">{jobId}</TableCell>\n                <TableCell align=\"center\">{pid}</TableCell>\n                <TableCell align=\"center\">{address?.ipAddress}</TableCell>\n                <TableCell align=\"center\">{address?.port}</TableCell>\n                <TableCell align=\"center\">\n                  <StatusChip type=\"actor\" status={state} />\n                </TableCell>\n                <TableCell align=\"center\">\n                  {ipLogMap[address?.ipAddress] && (\n                    <Link\n                      target=\"_blank\"\n                      to={`/log/${encodeURIComponent(\n                        ipLogMap[address?.ipAddress],\n                      )}?fileName=${jobId}-${pid}`}\n                    >\n                      Log\n                    </Link>\n                  )}\n                </TableCell>\n              </ExpandableTableRow>\n            ),\n          )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default ActorTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    background: \"linear-gradient(45deg, #21CBF3ee 30%, #2196F3ee 90%)\",\n    border: `1px solid #ffffffbb`,\n    padding: \"0 12px\",\n    height: 18,\n    lineHeight: \"18px\",\n    position: \"relative\",\n    boxSizing: \"content-box\",\n    borderRadius: 4,\n  },\n  displayBar: {\n    background: theme.palette.background.paper,\n    position: \"absolute\",\n    right: 0,\n    height: 18,\n    transition: \"0.5s width\",\n    borderRadius: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: \"2px solid transparent\",\n    boxSizing: \"border-box\",\n  },\n  text: {\n    fontSize: 12,\n    zIndex: 2,\n    position: \"relative\",\n    color: theme.palette.text.primary,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst PercentageBar = (\n  props: PropsWithChildren<{ num: number; total: number }>,\n) => {\n  const { num, total } = props;\n  const classes = useStyle();\n  const per = Math.round((num / total) * 100);\n\n  return (\n    <div className={classes.container}>\n      <div\n        className={classes.displayBar}\n        style={{\n          width: `${Math.min(Math.max(0, 100 - per), 100)}%`,\n        }}\n      />\n      <div className={classes.text}>{props.children}</div>\n    </div>\n  );\n};\n\nexport default PercentageBar;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StatusChip } from \"./StatusChip\";\n\nconst StateCounter = ({\n  type,\n  list,\n}: {\n  type: string;\n  list: { state: string }[];\n}) => {\n  const stateMap = {} as { [state: string]: number };\n  list.forEach(({ state }) => {\n    stateMap[state] = stateMap[state] + 1 || 1;\n  });\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      <Grid item>\n        <StatusChip status=\"TOTAL\" type={type} suffix={`x ${list.length}`} />\n      </Grid>\n      {Object.entries(stateMap).map(([s, num]) => (\n        <Grid item>\n          <StatusChip status={s} type={type} suffix={` x ${num}`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StateCounter;\n","import {\n  Button,\n  Grid,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { KeyboardArrowDown, KeyboardArrowRight } from \"@material-ui/icons\";\nimport dayjs from \"dayjs\";\nimport React, {\n  PropsWithChildren,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { CoreWorkerStats, Worker } from \"../type/worker\";\nimport { memoryConverter } from \"../util/converter\";\nimport { longTextCut } from \"../util/func\";\n\nimport { useFilter } from \"../util/hook\";\nimport ActorTable from \"./ActorTable\";\nimport PercentageBar from \"./PercentageBar\";\nimport { SearchInput } from \"./SearchComponent\";\n\nexport const ExpandableTableRow = ({\n  children,\n  expandComponent,\n  length,\n  stateKey = \"\",\n  ...otherProps\n}: PropsWithChildren<{\n  expandComponent: ReactNode;\n  length: number;\n  stateKey?: string;\n}>) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  useEffect(() => {\n    if (stateKey.startsWith(\"ON\")) {\n      setIsExpanded(true);\n    } else if (stateKey.startsWith(\"OFF\")) {\n      setIsExpanded(false);\n    }\n  }, [stateKey]);\n\n  if (length < 1) {\n    return (\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\" />\n        {children}\n      </TableRow>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\">\n          <IconButton\n            style={{ color: \"inherit\" }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {length}\n            {isExpanded ? <KeyboardArrowDown /> : <KeyboardArrowRight />}\n          </IconButton>\n        </TableCell>\n        {children}\n      </TableRow>\n      {isExpanded && (\n        <TableRow>\n          <TableCell colSpan={24}>{expandComponent}</TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst WorkerDetailTable = ({\n  actorMap,\n  coreWorkerStats,\n}: {\n  actorMap: { [actorId: string]: Actor };\n  coreWorkerStats: CoreWorkerStats[];\n}) => {\n  const actors = {} as { [actorId: string]: Actor };\n  (coreWorkerStats || [])\n    .filter((e) => actorMap[e.actorId])\n    .forEach((e) => (actors[e.actorId] = actorMap[e.actorId]));\n\n  if (!Object.values(actors).length) {\n    return <p>The Worker Haven't Had Related Actor Yet.</p>;\n  }\n\n  return (\n    <TableContainer>\n      <ActorTable actors={actors} />\n    </TableContainer>\n  );\n};\n\nconst RayletWorkerTable = ({\n  workers = [],\n  actorMap,\n  mini,\n}: {\n  workers: Worker[];\n  actorMap: { [actorId: string]: Actor };\n  mini?: boolean;\n}) => {\n  const { changeFilter, filterFunc } = useFilter();\n  const [key, setKey] = useState(\"\");\n  const { nodeMap, ipLogMap } = useContext(GlobalContext);\n  const open = () => setKey(`ON${Math.random()}`);\n  const close = () => setKey(`OFF${Math.random()}`);\n\n  return (\n    <React.Fragment>\n      {!mini && (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <SearchInput\n            label=\"Pid\"\n            onChange={(value) => changeFilter(\"pid\", value)}\n          />\n          <Button onClick={open}>Expand All</Button>\n          <Button onClick={close}>Collapse All</Button>\n        </div>\n      )}{\" \"}\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"Pid\",\n              \"CPU\",\n              \"CPU Times\",\n              \"Memory\",\n              \"CMD Line\",\n              \"Create Time\",\n              \"Log\",\n              \"Ops\",\n              \"IP/Hostname\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {workers\n            .filter(filterFunc)\n            .sort((aWorker, bWorker) => {\n              const a =\n                (aWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              const b =\n                (bWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              return b - a;\n            })\n            .map(\n              ({\n                pid,\n                cpuPercent,\n                cpuTimes,\n                memoryInfo,\n                cmdline,\n                createTime,\n                coreWorkerStats = [],\n                language,\n                ip,\n                hostname,\n              }) => (\n                <ExpandableTableRow\n                  expandComponent={\n                    <WorkerDetailTable\n                      actorMap={actorMap}\n                      coreWorkerStats={coreWorkerStats}\n                    />\n                  }\n                  length={\n                    (coreWorkerStats || []).filter((e) => actorMap[e.actorId])\n                      .length\n                  }\n                  key={pid}\n                  stateKey={key}\n                >\n                  <TableCell align=\"center\">{pid}</TableCell>\n                  <TableCell align=\"center\">\n                    <PercentageBar num={Number(cpuPercent)} total={100}>\n                      {cpuPercent}%\n                    </PercentageBar>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(cpuTimes || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{val}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(memoryInfo || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{memoryConverter(val)}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\" style={{ lineBreak: \"anywhere\" }}>\n                    {cmdline && longTextCut(cmdline.filter((e) => e).join(\" \"))}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {dayjs(createTime * 1000).format(\"YYYY/MM/DD HH:mm:ss\")}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Grid container spacing={2}>\n                      {ipLogMap[ip] && (\n                        <Grid item>\n                          <Link\n                            target=\"_blank\"\n                            to={`/log/${encodeURIComponent(\n                              ipLogMap[ip],\n                            )}?fileName=${\n                              coreWorkerStats[0].jobId || \"\"\n                            }-${pid}`}\n                          >\n                            Log\n                          </Link>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {language === \"JAVA\" && (\n                      <div>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstack/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstack\n                        </Button>{\" \"}\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jmap/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jmap\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstat/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstat\n                        </Button>\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {ip}\n                    <br />\n                    {nodeMap[hostname] ? (\n                      <Link target=\"_blank\" to={`/node/${nodeMap[hostname]}`}>\n                        {hostname}\n                      </Link>\n                    ) : (\n                      hostname\n                    )}\n                  </TableCell>\n                </ExpandableTableRow>\n              ),\n            )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default RayletWorkerTable;\n","import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      width: 34 + 12 * 2,\n      height: 14 + 12 * 2,\n      overflow: 'hidden',\n      padding: 12,\n      boxSizing: 'border-box',\n      position: 'relative',\n      flexShrink: 0,\n      zIndex: 0,\n      // Reset the stacking context.\n      verticalAlign: 'middle',\n      // For correct alignment with the text.\n      '@media print': {\n        colorAdjust: 'exact'\n      }\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -8\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -8\n    },\n\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      // Render above the focus ripple.\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create(['left', 'transform'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&$checked': {\n        transform: 'translateX(20px)'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        opacity: 0.5\n      },\n      '&$disabled + $track': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.primary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.secondary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      '& $thumb': {\n        width: 16,\n        height: 16\n      },\n      '& $switchBase': {\n        padding: 4,\n        '&$checked': {\n          transform: 'translateX(16px)'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n      left: '-100%',\n      width: '300%'\n    },\n\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the track element. */\n    track: {\n      height: '100%',\n      width: '100%',\n      borderRadius: 14 / 2,\n      zIndex: -1,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\nvar Switch = /*#__PURE__*/React.forwardRef(function Switch(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"edge\", \"size\"]);\n\n  var icon = /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.thumb\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: clsx(classes.root, className, {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge], size === \"small\" && classes[\"size\".concat(capitalize(size))])\n  }, /*#__PURE__*/React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: icon,\n    checkedIcon: icon,\n    classes: {\n      root: clsx(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      input: classes.input,\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    ref: ref\n  }, other)), /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.track\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);","import { JobDetailRsp, JobListRsp } from \"../type/job\";\nimport { get } from \"./requestHandlers\";\n\nexport const getJobList = () => {\n  return get<JobListRsp>(\"jobs?view=summary\");\n};\n\nexport const getJobDetail = (id: string) => {\n  return get<JobDetailRsp>(`jobs/${id}`);\n};\n","import {\n  Grid,\n  makeStyles,\n  Switch,\n  Tab,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tabs,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport ActorTable from \"../../components/ActorTable\";\nimport Loading from \"../../components/Loading\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\nimport RayletWorkerTable from \"../../components/WorkerTable\";\nimport { longTextCut } from \"../../util/func\";\nimport { useJobDetail } from \"./hook/useJobDetail\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  label: {\n    fontWeight: \"bold\",\n  },\n  pageMeta: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n  },\n  tab: {\n    marginBottom: theme.spacing(2),\n  },\n  dependenciesChip: {\n    margin: theme.spacing(0.5),\n    wordBreak: \"break-all\",\n  },\n  alert: {\n    color: theme.palette.error.main,\n  },\n}));\n\nconst JobDetailPage = (props: RouteComponentProps<{ id: string }>) => {\n  const classes = useStyle();\n  const {\n    actorMap,\n    jobInfo,\n    job,\n    msg,\n    selectedTab,\n    handleChange,\n    handleSwitchChange,\n    params,\n    refreshing,\n    ipLogMap,\n  } = useJobDetail(props);\n\n  if (!job || !jobInfo) {\n    return (\n      <div className={classes.root}>\n        <Loading loading={msg.startsWith(\"Loading\")} />\n        <TitleCard title={`JOB - ${params.id}`}>\n          <StatusChip type=\"job\" status=\"LOADING\" />\n          <br />\n          Auto Refresh:\n          <Switch\n            checked={refreshing}\n            onChange={handleSwitchChange}\n            name=\"refresh\"\n            inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n          />\n          <br />\n          Request Status: {msg} <br />\n        </TitleCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={`JOB - ${params.id}`}>\n        <StatusChip type=\"job\" status={jobInfo.isDead ? \"DEAD\" : \"ALIVE\"} />\n        <br />\n        Auto Refresh:\n        <Switch\n          checked={refreshing}\n          onChange={handleSwitchChange}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg} <br />\n      </TitleCard>\n      <TitleCard title=\"Job Detail\">\n        <Tabs\n          value={selectedTab}\n          onChange={handleChange}\n          className={classes.tab}\n        >\n          <Tab value=\"info\" label=\"Info\" />\n          <Tab value=\"dep\" label=\"Dependencies\" />\n          <Tab\n            value=\"worker\"\n            label={`Worker(${job?.jobWorkers?.length || 0})`}\n          />\n          <Tab\n            value=\"actor\"\n            label={`Actor(${Object.entries(job?.jobActors || {}).length || 0})`}\n          />\n        </Tabs>\n        {selectedTab === \"info\" && (\n          <Grid container spacing={2}>\n            <Grid item xs={4}>\n              <span className={classes.label}>Driver IP</span>:{\" \"}\n              {jobInfo.driverIpAddress}\n            </Grid>\n            {ipLogMap[jobInfo.driverIpAddress] && (\n              <Grid item xs={4}>\n                <span className={classes.label}>Driver Log</span>:{\" \"}\n                <Link\n                  to={`/log/${encodeURIComponent(\n                    ipLogMap[jobInfo.driverIpAddress],\n                  )}?fileName=driver-${jobInfo.jobId}`}\n                  target=\"_blank\"\n                >\n                  Log\n                </Link>\n              </Grid>\n            )}\n            <Grid item xs={4}>\n              <span className={classes.label}>Driver Pid</span>:{\" \"}\n              {jobInfo.driverPid}\n            </Grid>\n            {jobInfo.eventUrl && (\n              <Grid item xs={4}>\n                <span className={classes.label}>Event Link</span>:{\" \"}\n                <a\n                  href={jobInfo.eventUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Event Log\n                </a>\n              </Grid>\n            )}\n            {jobInfo.failErrorMessage && (\n              <Grid item xs={12}>\n                <span className={classes.label}>Fail Error</span>:{\" \"}\n                <span className={classes.alert}>\n                  {jobInfo.failErrorMessage}\n                </span>\n              </Grid>\n            )}\n          </Grid>\n        )}\n        {jobInfo?.dependencies && selectedTab === \"dep\" && (\n          <div className={classes.paper}>\n            {jobInfo?.dependencies?.python && (\n              <TitleCard title=\"Python Dependencies\">\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyItems: \"space-around\",\n                    flexWrap: \"wrap\",\n                  }}\n                >\n                  {jobInfo.dependencies.python.map((e) => (\n                    <StatusChip\n                      type=\"deps\"\n                      status={e.startsWith(\"http\") ? longTextCut(e, 30) : e}\n                      key={e}\n                    />\n                  ))}\n                </div>\n              </TitleCard>\n            )}\n            {jobInfo?.dependencies?.java && (\n              <TitleCard title=\"Java Dependencies\">\n                <TableContainer>\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        {[\"Name\", \"Version\", \"URL\"].map((col) => (\n                          <TableCell align=\"center\" key={col}>\n                            {col}\n                          </TableCell>\n                        ))}\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {jobInfo.dependencies.java.map(\n                        ({ name, version, url }) => (\n                          <TableRow key={url}>\n                            <TableCell align=\"center\">{name}</TableCell>\n                            <TableCell align=\"center\">{version}</TableCell>\n                            <TableCell align=\"center\">\n                              <a\n                                href={url}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                {url}\n                              </a>\n                            </TableCell>\n                          </TableRow>\n                        ),\n                      )}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </TitleCard>\n            )}\n          </div>\n        )}\n        {selectedTab === \"worker\" && (\n          <div>\n            <TableContainer className={classes.paper}>\n              <RayletWorkerTable\n                workers={job.jobWorkers}\n                actorMap={actorMap || {}}\n              />\n            </TableContainer>\n          </div>\n        )}\n        {selectedTab === \"actor\" && (\n          <div>\n            <TableContainer className={classes.paper}>\n              <ActorTable actors={actorMap || {}} workers={job.jobWorkers} />\n            </TableContainer>\n          </div>\n        )}\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default JobDetailPage;\n","import { useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { GlobalContext } from \"../../../App\";\nimport { getJobDetail } from \"../../../service/job\";\nimport { JobDetail } from \"../../../type/job\";\n\nexport const useJobDetail = (props: RouteComponentProps<{ id: string }>) => {\n  const {\n    match: { params },\n  } = props;\n  const [job, setJob] = useState<JobDetail>();\n  const [msg, setMsg] = useState(\"Loading the job detail\");\n  const [refreshing, setRefresh] = useState(true);\n  const [selectedTab, setTab] = useState(\"info\");\n  const { ipLogMap } = useContext(GlobalContext);\n  const tot = useRef<NodeJS.Timeout>();\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setTab(newValue);\n  };\n  const handleSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  const getJob = useCallback(async () => {\n    if (!refreshing) {\n      return;\n    }\n    const rsp = await getJobDetail(params.id);\n\n    if (rsp.data?.data?.detail) {\n      setJob(rsp.data.data.detail);\n    }\n\n    if (rsp.data?.msg) {\n      setMsg(rsp.data.msg || \"\");\n    }\n\n    if (rsp.data.result === false) {\n      setMsg(\"Job Query Error Please Check JobId\");\n      setJob(undefined);\n      setRefresh(false);\n    }\n\n    tot.current = setTimeout(getJob, 4000);\n  }, [refreshing, params.id]);\n\n  useEffect(() => {\n    if (tot.current) {\n      clearTimeout(tot.current);\n    }\n    getJob();\n    return () => {\n      if (tot.current) {\n        clearTimeout(tot.current);\n      }\n    };\n  }, [getJob]);\n\n  const { jobInfo } = job || {};\n  const actorMap = job?.jobActors;\n\n  return {\n    actorMap,\n    jobInfo,\n    job,\n    msg,\n    selectedTab,\n    handleChange,\n    handleSwitchChange,\n    params,\n    refreshing,\n    ipLogMap,\n  };\n};\n"],"sourceRoot":""}